1) Il  faut faire pour écrire un chiffre négatif, regarder sur internet complément à deux, ainsi pour toute les valeurs immédiates le dernier bit est un bit signé.
Check


2) Commencer à construire la mémoire ou les registres

Pour la mémmoire :

    - elle fait 4 Go

    - il faut écrire les instructions dans la mémoire avec le type BIG ENDIAN (chaque instruction est codés sur 4 octets).


    - il faut créer une structure de type liste chainée ou dans chaque éléments de la liste il y a une structure contenant l'adresse de la mémoire et sa valeurs (l'adresse va de 0x00000000 à 0xFFFFFFFF donc l'adresse est aussi coder sur 32 bits)

    - il faut faire une fonction qui pourras écrire dans la mémoire en lui donnant les arguments (adresse et valeur) si on écrit dans la mémoire alors on crée un nouveau morceau dans notre structure de liste

    - et une fonction qui lit les donnée dans la mémoire


<<<<<<< HEAD
=======
memory RAM = NULL;
	Register tableRegister[32] = {0} ;
	
	unsigned long long int value = 4147483649;                          /* 2147483647 max value for 32 bits and -2147483648 min value for 32 bits */
	int i;						   
								   
	for(i=0; value>0; i++) {
        tableRegister[1].registre[i] = value % 2;  
        value = value / 2;  
    }
	value = 4147483649;
	for(i=0; value>0; i++) {
        tableRegister[2].registre[i] = value % 2;  
        value = value / 2;  
    }

	value = 0;
	for(i=0; value>0; i++) {
        tableRegister[4].registre[i] = value % 2;  
        value = value / 2;  
    }

>>>>>>> 0fdeed4 (maj)
writeFourOctetsInMemory(binaire3, 0, &RAM);
	readAndDecodeInstruction(0, tableRegister, &RAM);


void ADD_Operation(int *binaireInstruction, Register *tableRegister)
{
	int rd = returnArgument(binaireInstruction, 11, 16);
	int rt = returnArgument(binaireInstruction, 16, 21);
	int rs = returnArgument(binaireInstruction, 21, 26);
	
	addTwoBinaryRegister(tableRegister[rs].registre, tableRegister[rt].registre, tableRegister[rd].registre);
	
	
	printf("R%d + R%d --> R%d\n",rs,rt,rd);
	int i;
	for(i=31;i>=0;i--)
	{
		printf("%d",tableRegister[rd].registre[i]);
	}
	printf("\n");
}


int addTwoBinaryRegister(int *register1, int *register2, int *destinationRegister)
{

	int k;
	for(k=31;k>=0;k--)
	{
		printf("%d",register1[k]);
	}
	printf("\n");
	for(k=31;k>=0;k--)
	{
		printf("%d",register2[k]);
	}
	printf("\n");

	int i;
	int carry = 0;
	int overflowed = 0;
	int tempRegister[32] = {0};

	for(i=0;i<32;i++)
	{
		tempRegister[i] = register1[i] + register2[i] + carry;
		carry = 0;
		if(tempRegister[i] == 2)
		{
			tempRegister[i] = 0;
			carry = 1;
		}
		else if(tempRegister[i] == 3)
		{
			tempRegister[i] = 1;
			carry = 1;
		}
	}
	/* To check if overflow */
	if(register1[31] != register2[31]) {
		overflowed = 0;
	}
	else if(register1[31] != tempRegister[31]) {
		overflowed = 1;
	}
	else {overflowed = 0;}
	
	if(overflowed == 0)
	{
		for(i=0;i<32;i++)
		{
			destinationRegister[i] = tempRegister[i];
		}
	
	}
	else {
		printf("overflowed\n");
	}
	return overflowed;
}

unsigned long long int value = 4147483649;                          /* 2147483647 max value for 32 bits and -2147483648 min value for 32 bits */
	int i;						   
								   
	for(i=0; value>0; i++) {
        tableRegister[1].registre[i] = value % 2;  
        value = value / 2;  
    }
	value = 4147483649;
	for(i=0; value>0; i++) {
        tableRegister[2].registre[i] = value % 2;  
        value = value / 2;  
    }

	value = 0;
	for(i=0; value>0; i++) {
        tableRegister[4].registre[i] = value % 2;  
        value = value / 2;  
    }
